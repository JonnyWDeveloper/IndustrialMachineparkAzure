@page "/fetchdata"
@inject HttpClient Http

    
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <SelectList Items="WeatherForecasts" @bind-SelectedItems="SelectedForecasts"
           @bind-ListedItems="WeatherForecasts"  Context="forecast">
        <ItemTemplate>
            <span class="span-padding">@forecast.Date </span>
            <span class="span-padding">@forecast.Summary</span>
            <span class="span-padding">@forecast.TemperatureC&#8451;</span>
            <span class="span-padding">@forecast.TemperatureF&#8457;</span>
        </ItemTemplate>
    </SelectList>
}
<hr />
<h5>Selected forecasts </h5>
<ul>
    @foreach (var forecast in SelectedForecasts)
    {
        <li>@forecast.Summary : @forecast.TemperatureC&#8451;</li>
    }
</ul>
@code {
    public WeatherForecast[]? forecasts;

    public List<WeatherForecast>? WeatherForecasts
    {
        get; set;
    } = new();

    List<WeatherForecast> SelectedForecasts
    {
        get; set;
    } = new();


    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        SelectedForecasts = forecasts!.ToList();
        WeatherForecasts = forecasts?.ToList();
    }

    public class WeatherForecast
    {
        public DateOnly Date
        {
            get; set;
        }

        public int TemperatureC
        {
            get; set;
        }

        public string? Summary
        {
            get; set;
        }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
